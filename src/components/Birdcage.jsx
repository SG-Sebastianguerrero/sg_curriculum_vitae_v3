/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 public/models/cage/scene.gltf
Author: Karolina Renkiewicz (https://sketchfab.com/KarolinaRenkiewicz)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/vintage-bird-cage-low-poly-animation-af6e5966d16a468c88b41369eefcbdf8
Title: Vintage Bird Cage - Low Poly Animation
*/

import { useGLTF, useScroll, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import React, { useLayoutEffect, useRef } from "react";

export default function Birdcage(props) {
  const { nodes, materials, animations } = useGLTF("models/cage/scene.gltf");
  const tl = useRef();

  const scroll = useScroll();

  const { actions, ref } = useAnimations(animations);

  useFrame(() => {
    // console.log(tl.current);
    tl.current.progress(scroll.offset);
    // can i use the curves of scroll ?
    // ----- maybe create a standard ? to only activate
    // in the second section and when back replay back and pause

    // tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    // i need to know wich section is active
    // because the transitions could only require
    // the first
    // and the reverse method on the top

    tl.current = gsap.timeline();

    tl.current.to(
      ref.current.position,
      {
        duration: 2,
        z: 0.5,
        x: 1,
      },
      0
    );
    tl.current.add(animateCage);

    /* tl.current.to(
      ref.current.rotation,
      { duration: 1, x: 0, y: Math.PI / 6, z: 0 },
      0
    ); */
  }, []);

  function animateCage() {
    actions["Take 001"].play();
    // console.log(actions["Take 001"]);
    setTimeout(() => {
      // actions["Take 001"].stop();
      actions["Take 001"].paused = true;
    }, 2000);
  }
  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="d674fa7aa9e941d8887b1b3edbd74994fbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.025}>
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="vintage_cage_door"
                  position={[-4.981, 56.102, 0.319]}
                  rotation={[-Math.PI / 2, 0, -Math.PI]}>
                  <mesh
                    name="vintage_cage_door_vintage_cage_0"
                    geometry={nodes.vintage_cage_door_vintage_cage_0.geometry}
                    material={materials.vintage_cage}
                  />
                </group>
                <group
                  name="Object001"
                  position={[0, 0, -14.85]}
                  rotation={[-Math.PI / 2, 0, Math.PI]}>
                  <mesh
                    name="Object001_vintage_cage_0"
                    geometry={nodes.Object001_vintage_cage_0.geometry}
                    material={materials.vintage_cage}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/cage/scene.gltf");
